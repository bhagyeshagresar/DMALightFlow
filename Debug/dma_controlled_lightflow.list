
dma_controlled_lightflow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f90  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003144  08003144  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800314c  0800314c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08003160  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003160  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf78  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab7  00000000  00000000  0002cfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002f670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001561e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d47a  00000000  00000000  000457f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895c2  00000000  00000000  00052c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc232  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  000dc284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800310c 	.word	0x0800310c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800310c 	.word	0x0800310c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fb2d 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f821 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f94b 	bl	8000780 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ea:	f000 f929 	bl	8000740 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f8fd 	bl	80006ec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004f2:	f000 f885 	bl	8000600 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  uint32_t counter;
  uint32_t ccr_val;
  //start the timer and configure it for blocking mode
  HAL_TIM_Base_Start(&htim2);
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <main+0x48>)
 80004f8:	f001 fe2e 	bl	8002158 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 counter =  __HAL_TIM_GET_COUNTER(&htim2);
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <main+0x48>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000502:	607b      	str	r3, [r7, #4]

	 ccr_val =  __HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_1);
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <main+0x48>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050a:	603b      	str	r3, [r7, #0]

	  if(counter == ccr_val){
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	429a      	cmp	r2, r3
 8000512:	d1f3      	bne.n	80004fc <main+0x24>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000514:	2120      	movs	r1, #32
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <main+0x4c>)
 8000518:	f001 f91b 	bl	8001752 <HAL_GPIO_TogglePin>
	 counter =  __HAL_TIM_GET_COUNTER(&htim2);
 800051c:	e7ee      	b.n	80004fc <main+0x24>
 800051e:	bf00      	nop
 8000520:	20000028 	.word	0x20000028
 8000524:	40020000 	.word	0x40020000

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fde0 	bl	80030fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <SystemClock_Config+0xd0>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a28      	ldr	r2, [pc, #160]	; (80005f8 <SystemClock_Config+0xd0>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <SystemClock_Config+0xd0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <SystemClock_Config+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd4>)
 8000576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800059c:	2310      	movs	r3, #16
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a6:	2304      	movs	r3, #4
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f8e8 	bl	8001788 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005be:	f000 f94d 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2102      	movs	r1, #2
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fb4a 	bl	8001c78 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ea:	f000 f937 	bl	800085c <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08e      	sub	sp, #56	; 0x38
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	615a      	str	r2, [r3, #20]
 800062e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000630:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <MX_TIM2_Init+0xe8>)
 8000632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000636:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <MX_TIM2_Init+0xe8>)
 800063a:	224f      	movs	r2, #79	; 0x4f
 800063c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <MX_TIM2_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <MX_TIM2_Init+0xe8>)
 8000646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800064a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <MX_TIM2_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <MX_TIM2_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000658:	4823      	ldr	r0, [pc, #140]	; (80006e8 <MX_TIM2_Init+0xe8>)
 800065a:	f001 fd2d 	bl	80020b8 <HAL_TIM_Base_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000664:	f000 f8fa 	bl	800085c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800066e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000672:	4619      	mov	r1, r3
 8000674:	481c      	ldr	r0, [pc, #112]	; (80006e8 <MX_TIM2_Init+0xe8>)
 8000676:	f001 fe7f 	bl	8002378 <HAL_TIM_ConfigClockSource>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000680:	f000 f8ec 	bl	800085c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000684:	4818      	ldr	r0, [pc, #96]	; (80006e8 <MX_TIM2_Init+0xe8>)
 8000686:	f001 fdc1 	bl	800220c <HAL_TIM_OC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000690:	f000 f8e4 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4619      	mov	r1, r3
 80006a2:	4811      	ldr	r0, [pc, #68]	; (80006e8 <MX_TIM2_Init+0xe8>)
 80006a4:	f002 f9d6 	bl	8002a54 <HAL_TIMEx_MasterConfigSynchronization>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006ae:	f000 f8d5 	bl	800085c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	4619      	mov	r1, r3
 80006c8:	4807      	ldr	r0, [pc, #28]	; (80006e8 <MX_TIM2_Init+0xe8>)
 80006ca:	f001 fdf9 	bl	80022c0 <HAL_TIM_OC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80006d4:	f000 f8c2 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <MX_TIM2_Init+0xe8>)
 80006da:	f000 f93f 	bl	800095c <HAL_TIM_MspPostInit>

}
 80006de:	bf00      	nop
 80006e0:	3738      	adds	r7, #56	; 0x38
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000028 	.word	0x20000028

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <MX_USART2_UART_Init+0x50>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x4c>)
 8000724:	f002 fa04 	bl	8002b30 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800072e:	f000 f895 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000d0 	.word	0x200000d0
 800073c:	40004400 	.word	0x40004400

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_DMA_Init+0x3c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <MX_DMA_Init+0x3c>)
 8000750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_DMA_Init+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2010      	movs	r0, #16
 8000768:	f000 fb35 	bl	8000dd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800076c:	2010      	movs	r0, #16
 800076e:	f000 fb4e 	bl	8000e0e <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a2c      	ldr	r2, [pc, #176]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a25      	ldr	r2, [pc, #148]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	4812      	ldr	r0, [pc, #72]	; (8000854 <MX_GPIO_Init+0xd4>)
 800080c:	f000 ff88 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000816:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <MX_GPIO_Init+0xd8>)
 8000828:	f000 fdf6 	bl	8001418 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082c:	2320      	movs	r3, #32
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_GPIO_Init+0xd4>)
 8000844:	f000 fde8 	bl	8001418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000
 8000858:	40020800 	.word	0x40020800

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <HAL_MspInit+0x4c>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087c:	6453      	str	r3, [r2, #68]	; 0x44
 800087e:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008a6:	2007      	movs	r0, #7
 80008a8:	f000 fa8a 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c8:	d13d      	bne.n	8000946 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <HAL_TIM_Base_MspInit+0x98>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a1f      	ldr	r2, [pc, #124]	; (8000950 <HAL_TIM_Base_MspInit+0x98>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <HAL_TIM_Base_MspInit+0x98>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <HAL_TIM_Base_MspInit+0xa0>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 80008ee:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80008f2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 8000902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000906:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 800090a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800090e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 8000912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000916:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000924:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800092a:	480a      	ldr	r0, [pc, #40]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 800092c:	f000 fa8a 	bl	8000e44 <HAL_DMA_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000936:	f7ff ff91 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a05      	ldr	r2, [pc, #20]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_TIM_Base_MspInit+0x9c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	20000070 	.word	0x20000070
 8000958:	40026088 	.word	0x40026088

0800095c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800097c:	d11d      	bne.n	80009ba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_TIM_MspPostInit+0x68>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a0f      	ldr	r2, [pc, #60]	; (80009c4 <HAL_TIM_MspPostInit+0x68>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <HAL_TIM_MspPostInit+0x68>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800099a:	2301      	movs	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <HAL_TIM_MspPostInit+0x6c>)
 80009b6:	f000 fd2f 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3720      	adds	r7, #32
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a19      	ldr	r2, [pc, #100]	; (8000a50 <HAL_UART_MspInit+0x84>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12b      	bne.n	8000a46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <HAL_UART_MspInit+0x88>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	6413      	str	r3, [r2, #64]	; 0x40
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_UART_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a26:	230c      	movs	r3, #12
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a36:	2307      	movs	r3, #7
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a42:	f000 fce9 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40004400 	.word	0x40004400
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 f89a 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <DMA1_Stream5_IRQHandler+0x10>)
 8000ab6:	f000 fa73 	bl	8000fa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000070 	.word	0x20000070

08000ac4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <SystemInit+0x20>)
 8000aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <SystemInit+0x20>)
 8000ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aee:	490e      	ldr	r1, [pc, #56]	; (8000b28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af0:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b04:	4c0b      	ldr	r4, [pc, #44]	; (8000b34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b12:	f7ff ffd7 	bl	8000ac4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f002 facd 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fcdd 	bl	80004d8 <main>
  bx  lr    
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b2c:	08003154 	.word	0x08003154
  ldr r2, =_sbss
 8000b30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b34:	20000118 	.word	0x20000118

08000b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b40:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <HAL_Init+0x40>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_Init+0x40>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <HAL_Init+0x40>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f92b 	bl	8000dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fe7a 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f943 	bl	8000e2a <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f90b 	bl	8000dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x20>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x24>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_IncTick+0x24>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008
 8000c04:	20000114 	.word	0x20000114

08000c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <HAL_GetTick+0x14>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000114 	.word	0x20000114

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	db0b      	blt.n	8000cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f003 021f 	and.w	r2, r3, #31
 8000c9c:	4907      	ldr	r1, [pc, #28]	; (8000cbc <__NVIC_EnableIRQ+0x38>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	095b      	lsrs	r3, r3, #5
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100

08000cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	6039      	str	r1, [r7, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db0a      	blt.n	8000cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	490c      	ldr	r1, [pc, #48]	; (8000d0c <__NVIC_SetPriority+0x4c>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	0112      	lsls	r2, r2, #4
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce8:	e00a      	b.n	8000d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <__NVIC_SetPriority+0x50>)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	f003 030f 	and.w	r3, r3, #15
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	0112      	lsls	r2, r2, #4
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	440b      	add	r3, r1
 8000cfe:	761a      	strb	r2, [r3, #24]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f1c3 0307 	rsb	r3, r3, #7
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	bf28      	it	cs
 8000d32:	2304      	movcs	r3, #4
 8000d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d902      	bls.n	8000d44 <NVIC_EncodePriority+0x30>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3b03      	subs	r3, #3
 8000d42:	e000      	b.n	8000d46 <NVIC_EncodePriority+0x32>
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	f04f 32ff 	mov.w	r2, #4294967295
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	fa01 f303 	lsl.w	r3, r1, r3
 8000d66:	43d9      	mvns	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d6c:	4313      	orrs	r3, r2
         );
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3724      	adds	r7, #36	; 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d8c:	d301      	bcc.n	8000d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00f      	b.n	8000db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <SysTick_Config+0x40>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f7ff ff8e 	bl	8000cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <SysTick_Config+0x40>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SysTick_Config+0x40>)
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	e000e010 	.word	0xe000e010

08000dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ff29 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4603      	mov	r3, r0
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de8:	f7ff ff3e 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	68b9      	ldr	r1, [r7, #8]
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	f7ff ff8e 	bl	8000d14 <NVIC_EncodePriority>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff5d 	bl	8000cc0 <__NVIC_SetPriority>
}
 8000e06:	bf00      	nop
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff31 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffa2 	bl	8000d7c <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff feda 	bl	8000c08 <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d101      	bne.n	8000e60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e099      	b.n	8000f94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2202      	movs	r2, #2
 8000e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f022 0201 	bic.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e80:	e00f      	b.n	8000ea2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e82:	f7ff fec1 	bl	8000c08 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d908      	bls.n	8000ea2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2220      	movs	r2, #32
 8000e94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e078      	b.n	8000f94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e8      	bne.n	8000e82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <HAL_DMA_Init+0x158>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ee6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d107      	bne.n	8000f0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	4313      	orrs	r3, r2
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f023 0307 	bic.w	r3, r3, #7
 8000f22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d117      	bne.n	8000f66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00e      	beq.n	8000f66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f9e9 	bl	8001320 <DMA_CheckFifoParam>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2240      	movs	r2, #64	; 0x40
 8000f58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f62:	2301      	movs	r3, #1
 8000f64:	e016      	b.n	8000f94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f9a0 	bl	80012b4 <DMA_CalcBaseAndBitshift>
 8000f74:	4603      	mov	r3, r0
 8000f76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f7c:	223f      	movs	r2, #63	; 0x3f
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	f010803f 	.word	0xf010803f

08000fa0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000fac:	4b8e      	ldr	r3, [pc, #568]	; (80011e8 <HAL_DMA_IRQHandler+0x248>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a8e      	ldr	r2, [pc, #568]	; (80011ec <HAL_DMA_IRQHandler+0x24c>)
 8000fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb6:	0a9b      	lsrs	r3, r3, #10
 8000fb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fca:	2208      	movs	r2, #8
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d01a      	beq.n	800100c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d013      	beq.n	800100c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0204 	bic.w	r2, r2, #4
 8000ff2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001004:	f043 0201 	orr.w	r2, r3, #1
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001010:	2201      	movs	r2, #1
 8001012:	409a      	lsls	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4013      	ands	r3, r2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d012      	beq.n	8001042 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00b      	beq.n	8001042 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800102e:	2201      	movs	r2, #1
 8001030:	409a      	lsls	r2, r3
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800103a:	f043 0202 	orr.w	r2, r3, #2
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001046:	2204      	movs	r2, #4
 8001048:	409a      	lsls	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4013      	ands	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d012      	beq.n	8001078 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00b      	beq.n	8001078 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001064:	2204      	movs	r2, #4
 8001066:	409a      	lsls	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001070:	f043 0204 	orr.w	r2, r3, #4
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107c:	2210      	movs	r2, #16
 800107e:	409a      	lsls	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d043      	beq.n	8001110 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d03c      	beq.n	8001110 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109a:	2210      	movs	r2, #16
 800109c:	409a      	lsls	r2, r3
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d018      	beq.n	80010e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d108      	bne.n	80010d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d024      	beq.n	8001110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	4798      	blx	r3
 80010ce:	e01f      	b.n	8001110 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d01b      	beq.n	8001110 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	4798      	blx	r3
 80010e0:	e016      	b.n	8001110 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d107      	bne.n	8001100 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0208 	bic.w	r2, r2, #8
 80010fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001114:	2220      	movs	r2, #32
 8001116:	409a      	lsls	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 808f 	beq.w	8001240 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 8087 	beq.w	8001240 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001136:	2220      	movs	r2, #32
 8001138:	409a      	lsls	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b05      	cmp	r3, #5
 8001148:	d136      	bne.n	80011b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0216 	bic.w	r2, r2, #22
 8001158:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001168:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	2b00      	cmp	r3, #0
 8001170:	d103      	bne.n	800117a <HAL_DMA_IRQHandler+0x1da>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f022 0208 	bic.w	r2, r2, #8
 8001188:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800118e:	223f      	movs	r2, #63	; 0x3f
 8001190:	409a      	lsls	r2, r3
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d07e      	beq.n	80012ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	4798      	blx	r3
        }
        return;
 80011b6:	e079      	b.n	80012ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d01d      	beq.n	8001202 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10d      	bne.n	80011f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d031      	beq.n	8001240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	4798      	blx	r3
 80011e4:	e02c      	b.n	8001240 <HAL_DMA_IRQHandler+0x2a0>
 80011e6:	bf00      	nop
 80011e8:	20000000 	.word	0x20000000
 80011ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d023      	beq.n	8001240 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	4798      	blx	r3
 8001200:	e01e      	b.n	8001240 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d10f      	bne.n	8001230 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0210 	bic.w	r2, r2, #16
 800121e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001244:	2b00      	cmp	r3, #0
 8001246:	d032      	beq.n	80012ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	2b00      	cmp	r3, #0
 8001252:	d022      	beq.n	800129a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2205      	movs	r2, #5
 8001258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f022 0201 	bic.w	r2, r2, #1
 800126a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	3301      	adds	r3, #1
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	429a      	cmp	r2, r3
 8001276:	d307      	bcc.n	8001288 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1f2      	bne.n	800126c <HAL_DMA_IRQHandler+0x2cc>
 8001286:	e000      	b.n	800128a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001288:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	4798      	blx	r3
 80012aa:	e000      	b.n	80012ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80012ac:	bf00      	nop
    }
  }
}
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	3b10      	subs	r3, #16
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <DMA_CalcBaseAndBitshift+0x64>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <DMA_CalcBaseAndBitshift+0x68>)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d909      	bls.n	80012f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012ea:	f023 0303 	bic.w	r3, r3, #3
 80012ee:	1d1a      	adds	r2, r3, #4
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	659a      	str	r2, [r3, #88]	; 0x58
 80012f4:	e007      	b.n	8001306 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012fe:	f023 0303 	bic.w	r3, r3, #3
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	aaaaaaab 	.word	0xaaaaaaab
 800131c:	0800313c 	.word	0x0800313c

08001320 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11f      	bne.n	800137a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b03      	cmp	r3, #3
 800133e:	d856      	bhi.n	80013ee <DMA_CheckFifoParam+0xce>
 8001340:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <DMA_CheckFifoParam+0x28>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	08001359 	.word	0x08001359
 800134c:	0800136b 	.word	0x0800136b
 8001350:	08001359 	.word	0x08001359
 8001354:	080013ef 	.word	0x080013ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d046      	beq.n	80013f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001368:	e043      	b.n	80013f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001372:	d140      	bne.n	80013f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001378:	e03d      	b.n	80013f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001382:	d121      	bne.n	80013c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d837      	bhi.n	80013fa <DMA_CheckFifoParam+0xda>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <DMA_CheckFifoParam+0x70>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	080013a1 	.word	0x080013a1
 8001394:	080013a7 	.word	0x080013a7
 8001398:	080013a1 	.word	0x080013a1
 800139c:	080013b9 	.word	0x080013b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
      break;
 80013a4:	e030      	b.n	8001408 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d025      	beq.n	80013fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80013b6:	e022      	b.n	80013fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013c0:	d11f      	bne.n	8001402 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013c6:	e01c      	b.n	8001402 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d903      	bls.n	80013d6 <DMA_CheckFifoParam+0xb6>
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d003      	beq.n	80013dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013d4:	e018      	b.n	8001408 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
      break;
 80013da:	e015      	b.n	8001408 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d00e      	beq.n	8001406 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
      break;
 80013ec:	e00b      	b.n	8001406 <DMA_CheckFifoParam+0xe6>
      break;
 80013ee:	bf00      	nop
 80013f0:	e00a      	b.n	8001408 <DMA_CheckFifoParam+0xe8>
      break;
 80013f2:	bf00      	nop
 80013f4:	e008      	b.n	8001408 <DMA_CheckFifoParam+0xe8>
      break;
 80013f6:	bf00      	nop
 80013f8:	e006      	b.n	8001408 <DMA_CheckFifoParam+0xe8>
      break;
 80013fa:	bf00      	nop
 80013fc:	e004      	b.n	8001408 <DMA_CheckFifoParam+0xe8>
      break;
 80013fe:	bf00      	nop
 8001400:	e002      	b.n	8001408 <DMA_CheckFifoParam+0xe8>
      break;   
 8001402:	bf00      	nop
 8001404:	e000      	b.n	8001408 <DMA_CheckFifoParam+0xe8>
      break;
 8001406:	bf00      	nop
    }
  } 
  
  return status; 
 8001408:	7bfb      	ldrb	r3, [r7, #15]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e159      	b.n	80016e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8148 	bne.w	80016e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a2 	beq.w	80016e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b57      	ldr	r3, [pc, #348]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a56      	ldr	r2, [pc, #344]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b54      	ldr	r3, [pc, #336]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a52      	ldr	r2, [pc, #328]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0x202>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2f4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x1fe>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a47      	ldr	r2, [pc, #284]	; (8001710 <HAL_GPIO_Init+0x2f8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x1fa>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_GPIO_Init+0x2fc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x1f6>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_GPIO_Init+0x300>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x1f2>
 8001606:	2304      	movs	r3, #4
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160a:	2307      	movs	r3, #7
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x204>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_GPIO_Init+0x304>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_GPIO_Init+0x304>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_GPIO_Init+0x304>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a24      	ldr	r2, [pc, #144]	; (800171c <HAL_GPIO_Init+0x304>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_GPIO_Init+0x304>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b2:	4a1a      	ldr	r2, [pc, #104]	; (800171c <HAL_GPIO_Init+0x304>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_GPIO_Init+0x304>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_GPIO_Init+0x304>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f aea2 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	619a      	str	r2, [r3, #24]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	041a      	lsls	r2, r3, #16
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43d9      	mvns	r1, r3
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	400b      	ands	r3, r1
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	619a      	str	r2, [r3, #24]
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e267      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d075      	beq.n	8001892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a6:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d00c      	beq.n	80017cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b2:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d112      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017be:	4b82      	ldr	r3, [pc, #520]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017ca:	d10b      	bne.n	80017e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017cc:	4b7e      	ldr	r3, [pc, #504]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d05b      	beq.n	8001890 <HAL_RCC_OscConfig+0x108>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d157      	bne.n	8001890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e242      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x74>
 80017ee:	4b76      	ldr	r3, [pc, #472]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a75      	ldr	r2, [pc, #468]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x98>
 8001806:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6f      	ldr	r2, [pc, #444]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800180c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6c      	ldr	r2, [pc, #432]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e00b      	b.n	8001838 <HAL_RCC_OscConfig+0xb0>
 8001820:	4b69      	ldr	r3, [pc, #420]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a68      	ldr	r2, [pc, #416]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b66      	ldr	r3, [pc, #408]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d013      	beq.n	8001868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff f9e2 	bl	8000c08 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff f9de 	bl	8000c08 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e207      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185a:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f0      	beq.n	8001848 <HAL_RCC_OscConfig+0xc0>
 8001866:	e014      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff f9ce 	bl	8000c08 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001870:	f7ff f9ca 	bl	8000c08 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b64      	cmp	r3, #100	; 0x64
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1f3      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001882:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0xe8>
 800188e:	e000      	b.n	8001892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800189e:	4b4a      	ldr	r3, [pc, #296]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d11c      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b6:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d116      	bne.n	80018f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e1c7      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4937      	ldr	r1, [pc, #220]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ee:	e03a      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f8:	4b34      	ldr	r3, [pc, #208]	; (80019cc <HAL_RCC_OscConfig+0x244>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff f983 	bl	8000c08 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff f97f 	bl	8000c08 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e1a8      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4925      	ldr	r1, [pc, #148]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 8001934:	4313      	orrs	r3, r2
 8001936:	600b      	str	r3, [r1, #0]
 8001938:	e015      	b.n	8001966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x244>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f962 	bl	8000c08 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001948:	f7ff f95e 	bl	8000c08 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e187      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d036      	beq.n	80019e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d016      	beq.n	80019a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x248>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff f942 	bl	8000c08 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001988:	f7ff f93e 	bl	8000c08 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e167      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_OscConfig+0x240>)
 800199c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f0      	beq.n	8001988 <HAL_RCC_OscConfig+0x200>
 80019a6:	e01b      	b.n	80019e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_OscConfig+0x248>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff f92b 	bl	8000c08 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	e00e      	b.n	80019d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff f927 	bl	8000c08 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d907      	bls.n	80019d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e150      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
 80019c8:	40023800 	.word	0x40023800
 80019cc:	42470000 	.word	0x42470000
 80019d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 80019d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ea      	bne.n	80019b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8097 	beq.w	8001b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10f      	bne.n	8001a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	4b7d      	ldr	r3, [pc, #500]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	4a7c      	ldr	r2, [pc, #496]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0e:	4b7a      	ldr	r3, [pc, #488]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1e:	4b77      	ldr	r3, [pc, #476]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d118      	bne.n	8001a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2a:	4b74      	ldr	r3, [pc, #464]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a73      	ldr	r2, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a36:	f7ff f8e7 	bl	8000c08 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3e:	f7ff f8e3 	bl	8000c08 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e10c      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_OscConfig+0x474>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2ea>
 8001a64:	4b64      	ldr	r3, [pc, #400]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a68:	4a63      	ldr	r2, [pc, #396]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a70:	e01c      	b.n	8001aac <HAL_RCC_OscConfig+0x324>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b05      	cmp	r3, #5
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x30c>
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7e:	4a5e      	ldr	r2, [pc, #376]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	4b5c      	ldr	r3, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8a:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6713      	str	r3, [r2, #112]	; 0x70
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0x324>
 8001a94:	4b58      	ldr	r3, [pc, #352]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	4a57      	ldr	r2, [pc, #348]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f023 0301 	bic.w	r3, r3, #1
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa4:	4a54      	ldr	r2, [pc, #336]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	f023 0304 	bic.w	r3, r3, #4
 8001aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d015      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f8a8 	bl	8000c08 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f7ff f8a4 	bl	8000c08 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e0cb      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0ee      	beq.n	8001abc <HAL_RCC_OscConfig+0x334>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f892 	bl	8000c08 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f88e 	bl	8000c08 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e0b5      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afe:	4b3e      	ldr	r3, [pc, #248]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1ee      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0a:	7dfb      	ldrb	r3, [r7, #23]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d105      	bne.n	8001b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b10:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	4a38      	ldr	r2, [pc, #224]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80a1 	beq.w	8001c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d05c      	beq.n	8001bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d141      	bne.n	8001bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff f862 	bl	8000c08 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f85e 	bl	8000c08 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e087      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5a:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69da      	ldr	r2, [r3, #28]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	019b      	lsls	r3, r3, #6
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff f837 	bl	8000c08 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff f833 	bl	8000c08 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e05c      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x416>
 8001bbc:	e054      	b.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_RCC_OscConfig+0x478>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f820 	bl	8000c08 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff f81c 	bl	8000c08 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e045      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x444>
 8001bea:	e03d      	b.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e038      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_OscConfig+0x4ec>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d028      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d121      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d11a      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d111      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800

08001c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0cc      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d90c      	bls.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	683a      	ldr	r2, [r7, #0]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d001      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0b8      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d020      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ccc:	4b59      	ldr	r3, [pc, #356]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0308 	and.w	r3, r3, #8
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce4:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a52      	ldr	r2, [pc, #328]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b50      	ldr	r3, [pc, #320]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	494d      	ldr	r1, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d044      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b47      	ldr	r3, [pc, #284]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d119      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e07f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d36:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d46:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e067      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d68:	f7fe ff4e 	bl	8000c08 <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d70:	f7fe ff4a 	bl	8000c08 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e04f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 020c 	and.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d1eb      	bne.n	8001d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d20c      	bcs.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <HAL_RCC_ClockConfig+0x1b8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d001      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e032      	b.n	8001e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	4916      	ldr	r1, [pc, #88]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d009      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	490e      	ldr	r1, [pc, #56]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dfe:	f000 f821 	bl	8001e44 <HAL_RCC_GetSysClockFreq>
 8001e02:	4602      	mov	r2, r0
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	490a      	ldr	r1, [pc, #40]	; (8001e38 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	5ccb      	ldrb	r3, [r1, r3]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe feae 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00
 8001e34:	40023800 	.word	0x40023800
 8001e38:	08003124 	.word	0x08003124
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004

08001e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e48:	b094      	sub	sp, #80	; 0x50
 8001e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e50:	2300      	movs	r3, #0
 8001e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e54:	2300      	movs	r3, #0
 8001e56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5c:	4b79      	ldr	r3, [pc, #484]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d00d      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x40>
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	f200 80e1 	bhi.w	8002030 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x34>
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e76:	e0db      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e78:	4b73      	ldr	r3, [pc, #460]	; (8002048 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e7c:	e0db      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e7e:	4b73      	ldr	r3, [pc, #460]	; (800204c <HAL_RCC_GetSysClockFreq+0x208>)
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e82:	e0d8      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e84:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d063      	beq.n	8001f62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9a:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	099b      	lsrs	r3, r3, #6
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ea4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001eb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001eb6:	4622      	mov	r2, r4
 8001eb8:	462b      	mov	r3, r5
 8001eba:	f04f 0000 	mov.w	r0, #0
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	0159      	lsls	r1, r3, #5
 8001ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ec8:	0150      	lsls	r0, r2, #5
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4621      	mov	r1, r4
 8001ed0:	1a51      	subs	r1, r2, r1
 8001ed2:	6139      	str	r1, [r7, #16]
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ee8:	4659      	mov	r1, fp
 8001eea:	018b      	lsls	r3, r1, #6
 8001eec:	4651      	mov	r1, sl
 8001eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef2:	4651      	mov	r1, sl
 8001ef4:	018a      	lsls	r2, r1, #6
 8001ef6:	4651      	mov	r1, sl
 8001ef8:	ebb2 0801 	subs.w	r8, r2, r1
 8001efc:	4659      	mov	r1, fp
 8001efe:	eb63 0901 	sbc.w	r9, r3, r1
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f16:	4690      	mov	r8, r2
 8001f18:	4699      	mov	r9, r3
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	eb18 0303 	adds.w	r3, r8, r3
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	462b      	mov	r3, r5
 8001f24:	eb49 0303 	adc.w	r3, r9, r3
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f36:	4629      	mov	r1, r5
 8001f38:	024b      	lsls	r3, r1, #9
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f40:	4621      	mov	r1, r4
 8001f42:	024a      	lsls	r2, r1, #9
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f54:	f7fe f93e 	bl	80001d4 <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f60:	e058      	b.n	8002014 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f62:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	099b      	lsrs	r3, r3, #6
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
 8001f78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f7c:	4642      	mov	r2, r8
 8001f7e:	464b      	mov	r3, r9
 8001f80:	f04f 0000 	mov.w	r0, #0
 8001f84:	f04f 0100 	mov.w	r1, #0
 8001f88:	0159      	lsls	r1, r3, #5
 8001f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f8e:	0150      	lsls	r0, r2, #5
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4641      	mov	r1, r8
 8001f96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	f04f 0300 	mov.w	r3, #0
 8001fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8001fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	00eb      	lsls	r3, r5, #3
 8001fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fca:	00e2      	lsls	r2, r4, #3
 8001fcc:	4614      	mov	r4, r2
 8001fce:	461d      	mov	r5, r3
 8001fd0:	4643      	mov	r3, r8
 8001fd2:	18e3      	adds	r3, r4, r3
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	464b      	mov	r3, r9
 8001fd8:	eb45 0303 	adc.w	r3, r5, r3
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fea:	4629      	mov	r1, r5
 8001fec:	028b      	lsls	r3, r1, #10
 8001fee:	4621      	mov	r1, r4
 8001ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ff4:	4621      	mov	r1, r4
 8001ff6:	028a      	lsls	r2, r1, #10
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ffe:	2200      	movs	r2, #0
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	61fa      	str	r2, [r7, #28]
 8002004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002008:	f7fe f8e4 	bl	80001d4 <__aeabi_uldivmod>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4613      	mov	r3, r2
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_GetSysClockFreq+0x200>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	3301      	adds	r3, #1
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002028:	fbb2 f3f3 	udiv	r3, r2, r3
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800202e:	e002      	b.n	8002036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetSysClockFreq+0x204>)
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002038:	4618      	mov	r0, r3
 800203a:	3750      	adds	r7, #80	; 0x50
 800203c:	46bd      	mov	sp, r7
 800203e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	00f42400 	.word	0x00f42400
 800204c:	007a1200 	.word	0x007a1200

08002050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_RCC_GetHCLKFreq+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000000 	.word	0x20000000

08002068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800206c:	f7ff fff0 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0a9b      	lsrs	r3, r3, #10
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4903      	ldr	r1, [pc, #12]	; (800208c <HAL_RCC_GetPCLK1Freq+0x24>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40023800 	.word	0x40023800
 800208c:	08003134 	.word	0x08003134

08002090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002094:	f7ff ffdc 	bl	8002050 <HAL_RCC_GetHCLKFreq>
 8002098:	4602      	mov	r2, r0
 800209a:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	0b5b      	lsrs	r3, r3, #13
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	4903      	ldr	r1, [pc, #12]	; (80020b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a6:	5ccb      	ldrb	r3, [r1, r3]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800
 80020b4:	08003134 	.word	0x08003134

080020b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e041      	b.n	800214e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fbea 	bl	80008b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4610      	mov	r0, r2
 80020f8:	f000 fa06 	bl	8002508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d001      	beq.n	8002170 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e03c      	b.n	80021ea <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <HAL_TIM_Base_Start+0xa0>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d018      	beq.n	80021b4 <HAL_TIM_Base_Start+0x5c>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218a:	d013      	beq.n	80021b4 <HAL_TIM_Base_Start+0x5c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1a      	ldr	r2, [pc, #104]	; (80021fc <HAL_TIM_Base_Start+0xa4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d00e      	beq.n	80021b4 <HAL_TIM_Base_Start+0x5c>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_TIM_Base_Start+0xa8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_TIM_Base_Start+0x5c>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_TIM_Base_Start+0xac>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d004      	beq.n	80021b4 <HAL_TIM_Base_Start+0x5c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_TIM_Base_Start+0xb0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d111      	bne.n	80021d8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d010      	beq.n	80021e8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d6:	e007      	b.n	80021e8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40010000 	.word	0x40010000
 80021fc:	40000400 	.word	0x40000400
 8002200:	40000800 	.word	0x40000800
 8002204:	40000c00 	.word	0x40000c00
 8002208:	40014000 	.word	0x40014000

0800220c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e041      	b.n	80022a2 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f839 	bl	80022aa <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f000 f95c 	bl	8002508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_TIM_OC_ConfigChannel+0x1e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e048      	b.n	8002370 <HAL_TIM_OC_ConfigChannel+0xb0>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d839      	bhi.n	8002360 <HAL_TIM_OC_ConfigChannel+0xa0>
 80022ec:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002329 	.word	0x08002329
 80022f8:	08002361 	.word	0x08002361
 80022fc:	08002361 	.word	0x08002361
 8002300:	08002361 	.word	0x08002361
 8002304:	08002337 	.word	0x08002337
 8002308:	08002361 	.word	0x08002361
 800230c:	08002361 	.word	0x08002361
 8002310:	08002361 	.word	0x08002361
 8002314:	08002345 	.word	0x08002345
 8002318:	08002361 	.word	0x08002361
 800231c:	08002361 	.word	0x08002361
 8002320:	08002361 	.word	0x08002361
 8002324:	08002353 	.word	0x08002353
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f96a 	bl	8002608 <TIM_OC1_SetConfig>
      break;
 8002334:	e017      	b.n	8002366 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f9c9 	bl	80026d4 <TIM_OC2_SetConfig>
      break;
 8002342:	e010      	b.n	8002366 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	4618      	mov	r0, r3
 800234c:	f000 fa2e 	bl	80027ac <TIM_OC3_SetConfig>
      break;
 8002350:	e009      	b.n	8002366 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fa91 	bl	8002880 <TIM_OC4_SetConfig>
      break;
 800235e:	e002      	b.n	8002366 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	75fb      	strb	r3, [r7, #23]
      break;
 8002364:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800236e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_TIM_ConfigClockSource+0x1c>
 8002390:	2302      	movs	r3, #2
 8002392:	e0b4      	b.n	80024fe <HAL_TIM_ConfigClockSource+0x186>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023cc:	d03e      	beq.n	800244c <HAL_TIM_ConfigClockSource+0xd4>
 80023ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d2:	f200 8087 	bhi.w	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023da:	f000 8086 	beq.w	80024ea <HAL_TIM_ConfigClockSource+0x172>
 80023de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e2:	d87f      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b70      	cmp	r3, #112	; 0x70
 80023e6:	d01a      	beq.n	800241e <HAL_TIM_ConfigClockSource+0xa6>
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d87b      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b60      	cmp	r3, #96	; 0x60
 80023ee:	d050      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x11a>
 80023f0:	2b60      	cmp	r3, #96	; 0x60
 80023f2:	d877      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023f4:	2b50      	cmp	r3, #80	; 0x50
 80023f6:	d03c      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0xfa>
 80023f8:	2b50      	cmp	r3, #80	; 0x50
 80023fa:	d873      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d058      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x13a>
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d86f      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002404:	2b30      	cmp	r3, #48	; 0x30
 8002406:	d064      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002408:	2b30      	cmp	r3, #48	; 0x30
 800240a:	d86b      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 800240c:	2b20      	cmp	r3, #32
 800240e:	d060      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002410:	2b20      	cmp	r3, #32
 8002412:	d867      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
 8002414:	2b00      	cmp	r3, #0
 8002416:	d05c      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x15a>
 8002418:	2b10      	cmp	r3, #16
 800241a:	d05a      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x15a>
 800241c:	e062      	b.n	80024e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6899      	ldr	r1, [r3, #8]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f000 faf1 	bl	8002a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002440:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	609a      	str	r2, [r3, #8]
      break;
 800244a:	e04f      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6899      	ldr	r1, [r3, #8]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f000 fada 	bl	8002a14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800246e:	609a      	str	r2, [r3, #8]
      break;
 8002470:	e03c      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	f000 fa4e 	bl	8002920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2150      	movs	r1, #80	; 0x50
 800248a:	4618      	mov	r0, r3
 800248c:	f000 faa7 	bl	80029de <TIM_ITRx_SetConfig>
      break;
 8002490:	e02c      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	461a      	mov	r2, r3
 80024a0:	f000 fa6d 	bl	800297e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2160      	movs	r1, #96	; 0x60
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fa97 	bl	80029de <TIM_ITRx_SetConfig>
      break;
 80024b0:	e01c      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6859      	ldr	r1, [r3, #4]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	461a      	mov	r2, r3
 80024c0:	f000 fa2e 	bl	8002920 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2140      	movs	r1, #64	; 0x40
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fa87 	bl	80029de <TIM_ITRx_SetConfig>
      break;
 80024d0:	e00c      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f000 fa7e 	bl	80029de <TIM_ITRx_SetConfig>
      break;
 80024e2:	e003      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
      break;
 80024e8:	e000      	b.n	80024ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a34      	ldr	r2, [pc, #208]	; (80025ec <TIM_Base_SetConfig+0xe4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00f      	beq.n	8002540 <TIM_Base_SetConfig+0x38>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002526:	d00b      	beq.n	8002540 <TIM_Base_SetConfig+0x38>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a31      	ldr	r2, [pc, #196]	; (80025f0 <TIM_Base_SetConfig+0xe8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <TIM_Base_SetConfig+0x38>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a30      	ldr	r2, [pc, #192]	; (80025f4 <TIM_Base_SetConfig+0xec>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d003      	beq.n	8002540 <TIM_Base_SetConfig+0x38>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a2f      	ldr	r2, [pc, #188]	; (80025f8 <TIM_Base_SetConfig+0xf0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d108      	bne.n	8002552 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a25      	ldr	r2, [pc, #148]	; (80025ec <TIM_Base_SetConfig+0xe4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01b      	beq.n	8002592 <TIM_Base_SetConfig+0x8a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002560:	d017      	beq.n	8002592 <TIM_Base_SetConfig+0x8a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <TIM_Base_SetConfig+0xe8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <TIM_Base_SetConfig+0x8a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <TIM_Base_SetConfig+0xec>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00f      	beq.n	8002592 <TIM_Base_SetConfig+0x8a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <TIM_Base_SetConfig+0xf0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00b      	beq.n	8002592 <TIM_Base_SetConfig+0x8a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <TIM_Base_SetConfig+0xf4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <TIM_Base_SetConfig+0x8a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <TIM_Base_SetConfig+0xf8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d003      	beq.n	8002592 <TIM_Base_SetConfig+0x8a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <TIM_Base_SetConfig+0xfc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d108      	bne.n	80025a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a08      	ldr	r2, [pc, #32]	; (80025ec <TIM_Base_SetConfig+0xe4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d103      	bne.n	80025d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	615a      	str	r2, [r3, #20]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800
 80025f8:	40000c00 	.word	0x40000c00
 80025fc:	40014000 	.word	0x40014000
 8002600:	40014400 	.word	0x40014400
 8002604:	40014800 	.word	0x40014800

08002608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f023 0201 	bic.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <TIM_OC1_SetConfig+0xc8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d10c      	bne.n	800267e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0308 	bic.w	r3, r3, #8
 800266a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	4313      	orrs	r3, r2
 8002674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a13      	ldr	r2, [pc, #76]	; (80026d0 <TIM_OC1_SetConfig+0xc8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d111      	bne.n	80026aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800268c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	621a      	str	r2, [r3, #32]
}
 80026c4:	bf00      	nop
 80026c6:	371c      	adds	r7, #28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	40010000 	.word	0x40010000

080026d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f023 0210 	bic.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800270a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f023 0320 	bic.w	r3, r3, #32
 800271e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a1e      	ldr	r2, [pc, #120]	; (80027a8 <TIM_OC2_SetConfig+0xd4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d10d      	bne.n	8002750 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800274e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a15      	ldr	r2, [pc, #84]	; (80027a8 <TIM_OC2_SetConfig+0xd4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d113      	bne.n	8002780 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800275e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	621a      	str	r2, [r3, #32]
}
 800279a:	bf00      	nop
 800279c:	371c      	adds	r7, #28
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40010000 	.word	0x40010000

080027ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <TIM_OC3_SetConfig+0xd0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d10d      	bne.n	8002826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4313      	orrs	r3, r2
 800281c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <TIM_OC3_SetConfig+0xd0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d113      	bne.n	8002856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800283c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	621a      	str	r2, [r3, #32]
}
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40010000 	.word	0x40010000

08002880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	031b      	lsls	r3, r3, #12
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <TIM_OC4_SetConfig+0x9c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d109      	bne.n	80028f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	621a      	str	r2, [r3, #32]
}
 800290e:	bf00      	nop
 8002910:	371c      	adds	r7, #28
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40010000 	.word	0x40010000

08002920 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f023 0201 	bic.w	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800294a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f023 030a 	bic.w	r3, r3, #10
 800295c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	621a      	str	r2, [r3, #32]
}
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800297e:	b480      	push	{r7}
 8002980:	b087      	sub	sp, #28
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	f023 0210 	bic.w	r2, r3, #16
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	031b      	lsls	r3, r3, #12
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f043 0307 	orr.w	r3, r3, #7
 8002a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	609a      	str	r2, [r3, #8]
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	021a      	lsls	r2, r3, #8
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e050      	b.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab8:	d013      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10c      	bne.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800
 8002b28:	40000c00 	.word	0x40000c00
 8002b2c:	40014000 	.word	0x40014000

08002b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e03f      	b.n	8002bc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fd ff38 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	; 0x24
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f829 	bl	8002bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd0:	b0c0      	sub	sp, #256	; 0x100
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	68d9      	ldr	r1, [r3, #12]
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	ea40 0301 	orr.w	r3, r0, r1
 8002bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c24:	f021 010c 	bic.w	r1, r1, #12
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c32:	430b      	orrs	r3, r1
 8002c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c46:	6999      	ldr	r1, [r3, #24]
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	ea40 0301 	orr.w	r3, r0, r1
 8002c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	; (8002e98 <UART_SetConfig+0x2cc>)
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d005      	beq.n	8002c6c <UART_SetConfig+0xa0>
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b8d      	ldr	r3, [pc, #564]	; (8002e9c <UART_SetConfig+0x2d0>)
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d104      	bne.n	8002c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c6c:	f7ff fa10 	bl	8002090 <HAL_RCC_GetPCLK2Freq>
 8002c70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c74:	e003      	b.n	8002c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c76:	f7ff f9f7 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8002c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c88:	f040 810c 	bne.w	8002ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c90:	2200      	movs	r2, #0
 8002c92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	1891      	adds	r1, r2, r2
 8002ca4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ca6:	415b      	adcs	r3, r3
 8002ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002cae:	4621      	mov	r1, r4
 8002cb0:	eb12 0801 	adds.w	r8, r2, r1
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	eb43 0901 	adc.w	r9, r3, r1
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cce:	4690      	mov	r8, r2
 8002cd0:	4699      	mov	r9, r3
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	eb18 0303 	adds.w	r3, r8, r3
 8002cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cdc:	462b      	mov	r3, r5
 8002cde:	eb49 0303 	adc.w	r3, r9, r3
 8002ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	18db      	adds	r3, r3, r3
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8002d00:	4613      	mov	r3, r2
 8002d02:	eb42 0303 	adc.w	r3, r2, r3
 8002d06:	657b      	str	r3, [r7, #84]	; 0x54
 8002d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d10:	f7fd fa60 	bl	80001d4 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <UART_SetConfig+0x2d4>)
 8002d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	011c      	lsls	r4, r3, #4
 8002d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	1891      	adds	r1, r2, r2
 8002d3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d3c:	415b      	adcs	r3, r3
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d44:	4641      	mov	r1, r8
 8002d46:	eb12 0a01 	adds.w	sl, r2, r1
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d64:	4692      	mov	sl, r2
 8002d66:	469b      	mov	fp, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d72:	464b      	mov	r3, r9
 8002d74:	eb4b 0303 	adc.w	r3, fp, r3
 8002d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d90:	460b      	mov	r3, r1
 8002d92:	18db      	adds	r3, r3, r3
 8002d94:	643b      	str	r3, [r7, #64]	; 0x40
 8002d96:	4613      	mov	r3, r2
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002da6:	f7fd fa15 	bl	80001d4 <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <UART_SetConfig+0x2d4>)
 8002db2:	fba3 2301 	umull	r2, r3, r3, r1
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2264      	movs	r2, #100	; 0x64
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	1acb      	subs	r3, r1, r3
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <UART_SetConfig+0x2d4>)
 8002dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dd4:	441c      	add	r4, r3
 8002dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002de0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	63b9      	str	r1, [r7, #56]	; 0x38
 8002df0:	415b      	adcs	r3, r3
 8002df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002df8:	4641      	mov	r1, r8
 8002dfa:	1851      	adds	r1, r2, r1
 8002dfc:	6339      	str	r1, [r7, #48]	; 0x30
 8002dfe:	4649      	mov	r1, r9
 8002e00:	414b      	adcs	r3, r1
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e10:	4659      	mov	r1, fp
 8002e12:	00cb      	lsls	r3, r1, #3
 8002e14:	4651      	mov	r1, sl
 8002e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	00ca      	lsls	r2, r1, #3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	4642      	mov	r2, r8
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	460a      	mov	r2, r1
 8002e30:	eb42 0303 	adc.w	r3, r2, r3
 8002e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	18db      	adds	r3, r3, r3
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e52:	4613      	mov	r3, r2
 8002e54:	eb42 0303 	adc.w	r3, r2, r3
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e62:	f7fd f9b7 	bl	80001d4 <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <UART_SetConfig+0x2d4>)
 8002e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	2164      	movs	r1, #100	; 0x64
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	3332      	adds	r3, #50	; 0x32
 8002e7e:	4a08      	ldr	r2, [pc, #32]	; (8002ea0 <UART_SetConfig+0x2d4>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	f003 0207 	and.w	r2, r3, #7
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4422      	add	r2, r4
 8002e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e94:	e105      	b.n	80030a2 <UART_SetConfig+0x4d6>
 8002e96:	bf00      	nop
 8002e98:	40011000 	.word	0x40011000
 8002e9c:	40011400 	.word	0x40011400
 8002ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002eae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002eb6:	4642      	mov	r2, r8
 8002eb8:	464b      	mov	r3, r9
 8002eba:	1891      	adds	r1, r2, r2
 8002ebc:	6239      	str	r1, [r7, #32]
 8002ebe:	415b      	adcs	r3, r3
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ec6:	4641      	mov	r1, r8
 8002ec8:	1854      	adds	r4, r2, r1
 8002eca:	4649      	mov	r1, r9
 8002ecc:	eb43 0501 	adc.w	r5, r3, r1
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	00eb      	lsls	r3, r5, #3
 8002eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ede:	00e2      	lsls	r2, r4, #3
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	461d      	mov	r5, r3
 8002ee4:	4643      	mov	r3, r8
 8002ee6:	18e3      	adds	r3, r4, r3
 8002ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002eec:	464b      	mov	r3, r9
 8002eee:	eb45 0303 	adc.w	r3, r5, r3
 8002ef2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f12:	4629      	mov	r1, r5
 8002f14:	008b      	lsls	r3, r1, #2
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	008a      	lsls	r2, r1, #2
 8002f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f24:	f7fd f956 	bl	80001d4 <__aeabi_uldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4b60      	ldr	r3, [pc, #384]	; (80030b0 <UART_SetConfig+0x4e4>)
 8002f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	011c      	lsls	r4, r3, #4
 8002f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f48:	4642      	mov	r2, r8
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	1891      	adds	r1, r2, r2
 8002f4e:	61b9      	str	r1, [r7, #24]
 8002f50:	415b      	adcs	r3, r3
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f58:	4641      	mov	r1, r8
 8002f5a:	1851      	adds	r1, r2, r1
 8002f5c:	6139      	str	r1, [r7, #16]
 8002f5e:	4649      	mov	r1, r9
 8002f60:	414b      	adcs	r3, r1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f70:	4659      	mov	r1, fp
 8002f72:	00cb      	lsls	r3, r1, #3
 8002f74:	4651      	mov	r1, sl
 8002f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	00ca      	lsls	r2, r1, #3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	4642      	mov	r2, r8
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f8c:	464b      	mov	r3, r9
 8002f8e:	460a      	mov	r2, r1
 8002f90:	eb42 0303 	adc.w	r3, r2, r3
 8002f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	008b      	lsls	r3, r1, #2
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fba:	4641      	mov	r1, r8
 8002fbc:	008a      	lsls	r2, r1, #2
 8002fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fc2:	f7fd f907 	bl	80001d4 <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <UART_SetConfig+0x4e4>)
 8002fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	2164      	movs	r1, #100	; 0x64
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	3332      	adds	r3, #50	; 0x32
 8002fde:	4a34      	ldr	r2, [pc, #208]	; (80030b0 <UART_SetConfig+0x4e4>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fea:	441c      	add	r4, r3
 8002fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8002ff4:	677a      	str	r2, [r7, #116]	; 0x74
 8002ff6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ffa:	4642      	mov	r2, r8
 8002ffc:	464b      	mov	r3, r9
 8002ffe:	1891      	adds	r1, r2, r2
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	415b      	adcs	r3, r3
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800300a:	4641      	mov	r1, r8
 800300c:	1851      	adds	r1, r2, r1
 800300e:	6039      	str	r1, [r7, #0]
 8003010:	4649      	mov	r1, r9
 8003012:	414b      	adcs	r3, r1
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003022:	4659      	mov	r1, fp
 8003024:	00cb      	lsls	r3, r1, #3
 8003026:	4651      	mov	r1, sl
 8003028:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302c:	4651      	mov	r1, sl
 800302e:	00ca      	lsls	r2, r1, #3
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	4603      	mov	r3, r0
 8003036:	4642      	mov	r2, r8
 8003038:	189b      	adds	r3, r3, r2
 800303a:	66bb      	str	r3, [r7, #104]	; 0x68
 800303c:	464b      	mov	r3, r9
 800303e:	460a      	mov	r2, r1
 8003040:	eb42 0303 	adc.w	r3, r2, r3
 8003044:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	663b      	str	r3, [r7, #96]	; 0x60
 8003050:	667a      	str	r2, [r7, #100]	; 0x64
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800305e:	4649      	mov	r1, r9
 8003060:	008b      	lsls	r3, r1, #2
 8003062:	4641      	mov	r1, r8
 8003064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003068:	4641      	mov	r1, r8
 800306a:	008a      	lsls	r2, r1, #2
 800306c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003070:	f7fd f8b0 	bl	80001d4 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <UART_SetConfig+0x4e4>)
 800307a:	fba3 1302 	umull	r1, r3, r3, r2
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2164      	movs	r1, #100	; 0x64
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	3332      	adds	r3, #50	; 0x32
 800308c:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <UART_SetConfig+0x4e4>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4422      	add	r2, r4
 80030a0:	609a      	str	r2, [r3, #8]
}
 80030a2:	bf00      	nop
 80030a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ae:	bf00      	nop
 80030b0:	51eb851f 	.word	0x51eb851f

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4d0d      	ldr	r5, [pc, #52]	; (80030ec <__libc_init_array+0x38>)
 80030b8:	4c0d      	ldr	r4, [pc, #52]	; (80030f0 <__libc_init_array+0x3c>)
 80030ba:	1b64      	subs	r4, r4, r5
 80030bc:	10a4      	asrs	r4, r4, #2
 80030be:	2600      	movs	r6, #0
 80030c0:	42a6      	cmp	r6, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	4d0b      	ldr	r5, [pc, #44]	; (80030f4 <__libc_init_array+0x40>)
 80030c6:	4c0c      	ldr	r4, [pc, #48]	; (80030f8 <__libc_init_array+0x44>)
 80030c8:	f000 f820 	bl	800310c <_init>
 80030cc:	1b64      	subs	r4, r4, r5
 80030ce:	10a4      	asrs	r4, r4, #2
 80030d0:	2600      	movs	r6, #0
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030dc:	4798      	blx	r3
 80030de:	3601      	adds	r6, #1
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e6:	4798      	blx	r3
 80030e8:	3601      	adds	r6, #1
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	0800314c 	.word	0x0800314c
 80030f0:	0800314c 	.word	0x0800314c
 80030f4:	0800314c 	.word	0x0800314c
 80030f8:	08003150 	.word	0x08003150

080030fc <memset>:
 80030fc:	4402      	add	r2, r0
 80030fe:	4603      	mov	r3, r0
 8003100:	4293      	cmp	r3, r2
 8003102:	d100      	bne.n	8003106 <memset+0xa>
 8003104:	4770      	bx	lr
 8003106:	f803 1b01 	strb.w	r1, [r3], #1
 800310a:	e7f9      	b.n	8003100 <memset+0x4>

0800310c <_init>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	bf00      	nop
 8003110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	469e      	mov	lr, r3
 8003116:	4770      	bx	lr

08003118 <_fini>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	bf00      	nop
 800311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311e:	bc08      	pop	{r3}
 8003120:	469e      	mov	lr, r3
 8003122:	4770      	bx	lr
